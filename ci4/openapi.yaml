openapi: 3.0.1
info:
  title: workerra-ci API
  version: 1.0.0
  description: |
    Core REST API surface for Workstation (workerra-ci) services. This document enumerates all
    routes exercised by the automated QA suite so the Swagger UI remains a reliable reference for
    engineers and testers. Unless noted otherwise, every endpoint requires a valid bearer token.
servers:
  - url: https://{host}
    description: Production API server
    variables:
      host:
        default: my.workstation.co.uk
  - url: https://{host}
    description: Acceptance/QA API server
    variables:
      host:
        default: acc.workstation.co.uk
tags:
  - name: Health
    description: Service health and monitoring endpoints.
  - name: Auth
    description: Authentication and token management.
  - name: Employees
    description: Manage employee records.
  - name: Users
    description: Manage application users.
  - name: Businesses
    description: Administer business entities.
  - name: Customers
    description: Manage customer organisations.
  - name: Contacts
    description: Manage customer contacts and logins.
  - name: Projects
    description: Manage projects associated with customers.
  - name: Tasks
    description: Manage project tasks.
  - name: Timeslips
    description: Track logged time against tasks.
  - name: Timesheets
    description: Track billable and non-billable time entries.
  - name: Sprints
    description: Manage sprint cadences.
  - name: PurchaseOrders
    description: Manage purchase orders issued to suppliers.
  - name: WorkOrders
    description: Manage work orders raised for suppliers.
  - name: PurchaseInvoices
    description: Manage supplier purchase invoices.
  - name: SalesInvoices
    description: Manage customer sales invoices.
security:
  - bearerAuth: []
paths:
  /api/v1/ping:
    get:
      tags: [Health]
      summary: Health check
      description: Returns a small payload indicating the API process is alive.
      operationId: ping
      security: []
      responses:
        '200':
          description: Service is reachable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
  /auth/user_login:
    post:
      tags: [Auth]
      summary: Authenticate a user
      description: Issue a bearer token for the supplied credentials.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Authentication succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v2/employees:
    get:
      tags: [Employees]
      summary: List employees
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Employees matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags: [Employees]
      summary: Create an employee
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "first name":
                  type: string
                  description: Employee first name.
                email:
                  type: string
                  format: email
                uuid_business_id:
                  type: string
                  description: Business UUID the employee belongs to.
              required:
                - "first name"
                - email
                - uuid_business_id
      responses:
        '200':
          description: Employee profile created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/employees/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Employees]
      summary: Retrieve an employee
      responses:
        '200':
          description: Employee record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Employees]
      summary: Update an employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                surname:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - uuid
                - uuid_business_id
      responses:
        '200':
          description: Updated employee details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Employees]
      summary: Delete an employee
      responses:
        '200':
          description: Confirmation that the employee was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/users:
    get:
      tags: [Users]
      summary: List users
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Users matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags: [Users]
      summary: Create a user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                uuid_business_id:
                  type: string
              required:
                - name
                - email
                - password
                - uuid_business_id
      responses:
        '200':
          description: User account created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/users/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Users]
      summary: Retrieve a user
      responses:
        '200':
          description: User record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Users]
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                name:
                  type: string
                email:
                  type: string
                  format: email
                uuid_business_id:
                  type: string
              required:
                - uuid
                - name
                - email
                - uuid_business_id
      responses:
        '200':
          description: Updated user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Users]
      summary: Delete a user
      responses:
        '200':
          description: Confirmation that the user was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/businesses:
    get:
      tags: [Businesses]
      summary: List businesses
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Businesses matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Businesses]
      summary: Create a business
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                business_code:
                  type: string
                name:
                  type: string
              required:
                - business_code
                - name
      responses:
        '200':
          description: Business created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/businesses/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Businesses]
      summary: Retrieve a business
      responses:
        '200':
          description: Business record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Businesses]
      summary: Update a business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                name:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - uuid
                - name
                - uuid_business_id
      responses:
        '200':
          description: Updated business details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Businesses]
      summary: Delete a business
      responses:
        '200':
          description: Confirmation that the business was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/customers:
    get:
      tags: [Customers]
      summary: List customers
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Customers matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Customers]
      summary: Create a customer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                company_name:
                  type: string
                acc_no:
                  type: string
                  description: Accounting reference number.
                uuid_business:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                contact_firstname:
                  type: string
                status:
                  type: string
                supplier:
                  type: string
              required:
                - company_name
                - acc_no
                - uuid_business
                - email
      responses:
        '200':
          description: Customer created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/customers/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Customers]
      summary: Retrieve a customer
      responses:
        '200':
          description: Customer record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Customers]
      summary: Update a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                company_name:
                  type: string
                acc_no:
                  type: string
                contact_firstname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                supplier:
                  type: string
                status:
                  type: string
                uuid_business:
                  type: string
              required:
                - uuid
                - company_name
                - uuid_business
      responses:
        '200':
          description: Updated customer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Customers]
      summary: Delete a customer
      responses:
        '200':
          description: Confirmation that the customer was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/contacts:
    get:
      tags: [Contacts]
      summary: List contacts
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Contacts matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Contacts]
      summary: Create a contact
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                client_id:
                  type: string
                uuid_business:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                "address_line_1[]":
                  type: string
              required:
                - first_name
                - client_id
                - uuid_business
                - email
      responses:
        '200':
          description: Contact created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/contacts/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Contacts]
      summary: Retrieve a contact
      responses:
        '200':
          description: Contact record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Contacts]
      summary: Delete a contact
      responses:
        '200':
          description: Confirmation that the contact was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/projects:
    get:
      tags: [Projects]
      summary: List projects
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Projects matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Projects]
      summary: Create a project
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                customers_id:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - name
                - customers_id
                - uuid_business_id
      responses:
        '200':
          description: Project created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/projects/{id}:
    parameters:
      - $ref: '#/components/parameters/NumericIdPathParam'
    get:
      tags: [Projects]
      summary: Retrieve a project
      responses:
        '200':
          description: Project record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Projects]
      summary: Update a project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                customers_id:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - id
                - name
                - customers_id
                - uuid_business_id
      responses:
        '200':
          description: Updated project details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Projects]
      summary: Delete a project
      responses:
        '200':
          description: Confirmation that the project was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Tasks matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Tasks]
      summary: Create a task
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                customers_id:
                  type: string
                uuid_business_id:
                  type: string
                contacts_id:
                  type: string
                reported_by:
                  type: string
                projects_id:
                  type: string
                category:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                priority:
                  type: string
                sprint_id:
                  type: string
              required:
                - name
                - customers_id
                - uuid_business_id
                - contacts_id
                - reported_by
                - projects_id
      responses:
        '200':
          description: Task created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/tasks/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Tasks]
      summary: Retrieve a task
      responses:
        '200':
          description: Task record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Tasks]
      summary: Update a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                name:
                  type: string
                uuid_business_id:
                  type: string
                customers_id:
                  type: string
                contacts_id:
                  type: string
                reported_by:
                  type: string
                projects_id:
                  type: string
                category:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                priority:
                  type: string
                sprint_id:
                  type: string
              required:
                - uuid
                - name
                - uuid_business_id
      responses:
        '200':
          description: Updated task details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Tasks]
      summary: Delete a task
      responses:
        '200':
          description: Confirmation that the task was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/timeslips:
    get:
      tags: [Timeslips]
      summary: List timeslips
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Timeslips matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Timeslips]
      summary: Create a timeslip
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                task_id:
                  type: string
                week_no:
                  type: string
                uuid_business_id:
                  type: string
                employee_id:
                  type: string
                reported_by:
                  type: string
                slip_start_date:
                  type: string
                slip_end_date:
                  type: string
                slip_description:
                  type: string
                slip_timer_started:
                  type: string
                slip_timer_end:
                  type: string
              required:
                - task_id
                - uuid_business_id
                - employee_id
      responses:
        '200':
          description: Timeslip created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/timeslips/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Timeslips]
      summary: Retrieve a timeslip
      responses:
        '200':
          description: Timeslip record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Timeslips]
      summary: Update a timeslip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                task_id:
                  type: string
                uuid_business_id:
                  type: string
                employee_id:
                  type: string
                slip_start_date:
                  type: string
                slip_end_date:
                  type: string
                slip_description:
                  type: string
                slip_timer_started:
                  type: string
                slip_timer_end:
                  type: string
                week_no:
                  type: string
              required:
                - uuid
                - task_id
                - uuid_business_id
      responses:
        '200':
          description: Updated timeslip details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Timeslips]
      summary: Delete a timeslip
      responses:
        '200':
          description: Confirmation that the timeslip was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/timesheets:
    get:
      tags: [Timesheets]
      summary: List timesheets
      description: Returns paginated timesheets for a business with optional filters (status, employee, project, dates, invoicing).
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Timesheets matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetListResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Timesheets]
      summary: Create a timesheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TimesheetCreateRequest'
      responses:
        '201':
          description: Timesheet created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/timesheets/start:
    post:
      tags: [Timesheets]
      summary: Start a timesheet timer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetStartRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TimesheetStartRequest'
      responses:
        '201':
          description: Timer started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v2/timesheets/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [Timesheets]
      summary: Retrieve a timesheet
      responses:
        '200':
          description: Timesheet record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Timesheets]
      summary: Update a timesheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetUpdateRequest'
      responses:
        '200':
          description: Updated timesheet details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Timesheets]
      summary: Delete a timesheet
      responses:
        '200':
          description: Confirmation that the timesheet was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/timesheets/{uuid}/stop:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    post:
      tags: [Timesheets]
      summary: Stop a timesheet timer
      responses:
        '200':
          description: Timer stopped.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/sprints:
    get:
      tags: [Sprints]
      summary: List sprints
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Sprints matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Sprints]
      summary: Create a sprint
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                sprint_name:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - sprint_name
                - start_date
                - end_date
                - uuid_business_id
      responses:
        '200':
          description: Sprint created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/sprints/{id}:
    parameters:
      - $ref: '#/components/parameters/NumericIdPathParam'
    get:
      tags: [Sprints]
      summary: Retrieve a sprint
      responses:
        '200':
          description: Sprint record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Sprints]
      summary: Update a sprint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                sprint_name:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - id
                - sprint_name
                - uuid_business_id
      responses:
        '200':
          description: Updated sprint details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [Sprints]
      summary: Delete a sprint
      responses:
        '200':
          description: Confirmation that the sprint was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/purchase_orders:
    get:
      tags: [PurchaseOrders]
      summary: List purchase orders
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Purchase orders matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [PurchaseOrders]
      summary: Create a purchase order
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - client_id
                - uuid_business_id
      responses:
        '200':
          description: Purchase order created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/purchase_orders/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [PurchaseOrders]
      summary: Retrieve a purchase order
      responses:
        '200':
          description: Purchase order record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [PurchaseOrders]
      summary: Update a purchase order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                client_id:
                  type: string
                uuid_business_id:
                  type: string
                bill_to:
                  type: string
              required:
                - uuid
                - client_id
                - uuid_business_id
      responses:
        '200':
          description: Updated purchase order details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [PurchaseOrders]
      summary: Delete a purchase order
      responses:
        '200':
          description: Confirmation that the purchase order was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/work_orders:
    get:
      tags: [WorkOrders]
      summary: List work orders
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Work orders matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [WorkOrders]
      summary: Create a work order
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - client_id
                - uuid_business_id
      responses:
        '200':
          description: Work order created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/work_orders/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [WorkOrders]
      summary: Retrieve a work order
      responses:
        '200':
          description: Work order record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [WorkOrders]
      summary: Update a work order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                client_id:
                  type: string
                uuid_business_id:
                  type: string
                bill_to:
                  type: string
              required:
                - uuid
                - client_id
                - uuid_business_id
      responses:
        '200':
          description: Updated work order details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [WorkOrders]
      summary: Delete a work order
      responses:
        '200':
          description: Confirmation that the work order was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/purchase_invoices:
    get:
      tags: [PurchaseInvoices]
      summary: List purchase invoices
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Purchase invoices matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [PurchaseInvoices]
      summary: Create a purchase invoice
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                terms:
                  type: string
                uuid_business_id:
                  type: string
                date:
                  type: string
                due_date:
                  type: string
                supplier:
                  type: string
                project_code:
                  type: string
              required:
                - terms
                - uuid_business_id
                - date
                - due_date
                - supplier
      responses:
        '200':
          description: Purchase invoice created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/purchase_invoices/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [PurchaseInvoices]
      summary: Retrieve a purchase invoice
      responses:
        '200':
          description: Purchase invoice record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [PurchaseInvoices]
      summary: Update a purchase invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                terms:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - uuid
                - uuid_business_id
      responses:
        '200':
          description: Updated purchase invoice details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [PurchaseInvoices]
      summary: Delete a purchase invoice
      responses:
        '200':
          description: Confirmation that the purchase invoice was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/sales_invoices:
    get:
      tags: [SalesInvoices]
      summary: List sales invoices
      parameters:
        - $ref: '#/components/parameters/FormatParam'
        - $ref: '#/components/parameters/ParamsParam'
      responses:
        '200':
          description: Sales invoices matching the supplied filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [SalesInvoices]
      summary: Create a sales invoice
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                terms:
                  type: string
                uuid_business_id:
                  type: string
                date:
                  type: string
                due_date:
                  type: string
                supplier:
                  type: string
                project_code:
                  type: string
              required:
                - terms
                - uuid_business_id
                - date
                - due_date
                - supplier
      responses:
        '200':
          description: Sales invoice created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
  /api/v2/sales_invoices/{uuid}:
    parameters:
      - $ref: '#/components/parameters/UuidPathParam'
    get:
      tags: [SalesInvoices]
      summary: Retrieve a sales invoice
      responses:
        '200':
          description: Sales invoice record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [SalesInvoices]
      summary: Update a sales invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                terms:
                  type: string
                uuid_business_id:
                  type: string
              required:
                - uuid
                - uuid_business_id
      responses:
        '200':
          description: Updated sales invoice details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEnvelope'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: [SalesInvoices]
      summary: Delete a sales invoice
      responses:
        '200':
          description: Confirmation that the sales invoice was deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfirmation'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    FormatParam:
      name: _format
      in: query
      schema:
        type: string
        enum: [json]
      description: Optional format override (default json).
    ParamsParam:
      name: params
      in: query
      schema:
        type: string
      description: JSON-encoded filter payload supporting pagination, sorting and filtering.
    UuidPathParam:
      name: uuid
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier for the resource.
    NumericIdPathParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Numeric identifier for the resource.
  responses:
    UnauthorizedError:
      description: Authentication required or invalid token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Request failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Access to the requested resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties: true
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
      additionalProperties: false
    ResourceEnvelope:
      type: object
      properties:
        data:
          type: object
          additionalProperties: true
      additionalProperties: false
    Timesheet:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        uuid_business_id:
          type: string
        employee_id:
          type: string
        project_id:
          type: string
          nullable: true
        task_id:
          type: string
          nullable: true
        customer_id:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        duration_minutes:
          type: integer
          nullable: true
        billable_hours:
          type: number
          format: float
          nullable: true
        hourly_rate:
          type: number
          format: float
          nullable: true
        total_amount:
          type: number
          format: float
          nullable: true
        is_billable:
          type: boolean
        is_running:
          type: boolean
        is_invoiced:
          type: boolean
        invoice_id:
          type: string
          nullable: true
        status:
          type: string
        notes:
          type: string
          nullable: true
        tags:
          type: string
          nullable: true
        created_by:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        employee_full_name:
          type: string
          nullable: true
        employee_first_name:
          type: string
          nullable: true
        employee_surname:
          type: string
          nullable: true
        project_name:
          type: string
          nullable: true
        task_name:
          type: string
          nullable: true
        customer_name:
          type: string
          nullable: true
      required:
        - uuid
        - uuid_business_id
        - employee_id
        - start_time
        - is_billable
        - is_running
        - is_invoiced
        - status
    TimesheetResponse:
      allOf:
        - $ref: '#/components/schemas/ResourceEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Timesheet'
    TimesheetListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Timesheet'
    TimesheetCreateRequest:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        uuid_business_id:
          type: string
        employee_id:
          type: string
        project_id:
          type: string
          nullable: true
        task_id:
          type: string
          nullable: true
        customer_id:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        is_billable:
          type: boolean
        is_running:
          type: boolean
          nullable: true
        is_invoiced:
          type: boolean
          nullable: true
        invoice_id:
          type: string
          nullable: true
        billable_hours:
          type: number
          format: float
          nullable: true
        duration_minutes:
          type: integer
          nullable: true
        hourly_rate:
          type: number
          format: float
          nullable: true
        total_amount:
          type: number
          format: float
          nullable: true
        status:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        tags:
          type: string
          nullable: true
        created_by:
          type: string
          nullable: true
      required:
        - uuid_business_id
        - employee_id
        - start_time
    TimesheetUpdateRequest:
      type: object
      description: Supply one or more fields to update on the targeted timesheet.
      properties:
        project_id:
          type: string
          nullable: true
        task_id:
          type: string
          nullable: true
        customer_id:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        billable_hours:
          type: number
          format: float
          nullable: true
        duration_minutes:
          type: integer
          nullable: true
        hourly_rate:
          type: number
          format: float
          nullable: true
        total_amount:
          type: number
          format: float
          nullable: true
        is_billable:
          type: boolean
          nullable: true
        is_running:
          type: boolean
          nullable: true
        is_invoiced:
          type: boolean
          nullable: true
        invoice_id:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        tags:
          type: string
          nullable: true
        created_by:
          type: string
          nullable: true
    TimesheetStartRequest:
      type: object
      properties:
        uuid_business_id:
          type: string
        employee_id:
          type: string
        project_id:
          type: string
          nullable: true
        task_id:
          type: string
          nullable: true
        customer_id:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        hourly_rate:
          type: number
          format: float
          nullable: true
        status:
          type: string
          nullable: true
        is_billable:
          type: boolean
          nullable: true
        created_by:
          type: string
          nullable: true
      required:
        - uuid_business_id
        - employee_id
    DeleteConfirmation:
      type: object
      properties:
        data:
          type: array
          items:
            type: boolean
          example: [true]
      additionalProperties: false
    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        perPage:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
      additionalProperties: false
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        errors:
          type: array
          items:
            type: string
      additionalProperties: true
    AuthSuccessResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Token lifetime in seconds.
        user:
          type: object
          properties:
            uuid_business_id:
              type: string
      required:
        - access_token
        - token_type
    PingResponse:
      type: object
      properties:
        response:
          type: string
          example: pong
