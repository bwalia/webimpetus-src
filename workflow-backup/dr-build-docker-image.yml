name: Webimpetus Disaster Recovery Management Docker Image

on:
  push:
    branches: [ dummy ]
  workflow_dispatch:
    inputs:
      ENV_REF:
        type: choice
        description: 'Please choose the Target Environment'
        default: 'test'
        required: true
        options:
        - test
        - acc
        - prod

      TARGET_REPO:      
        type: choice
        description: 'Please choose the Target docker repository'
        default: 'docker'
        required: true
        options:
        - docker
        - workstation
        - All

env:
  IMAGE_TAG: "test"
  TARGET_IMAGE_TAG: "test"
  TARGET_STACK: openresty_php
  IMAGE_NAME: webimpetus-dr
  TARGET_ENV: test
  IMAGE_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DR_DB_HOST: ${{ secrets.DR_DB_HOST }}
  DR_DB_USER: ${{ secrets.DR_DB_USER }}
  DR_DB_PASSWORD: ${{ secrets.DR_DB_PASSWORD }}
  DR_DB_NAME: ${{ secrets.DR_DB_NAME }}
  DR_DB_PORT: ${{ secrets.DR_DB_PORT }}
  DR_MINIO_HOST: ${{ secrets.DR_MINIO_HOST }}
  DR_MINIO_ACCESS_KEY: ${{ secrets.DR_MINIO_ACCESS_KEY }}
  DR_MINIO_SECRET_KEY: ${{ secrets.DR_MINIO_SECRET_KEY }}
  DR_MINIO_BUCKET: ${{ secrets.DR_MINIO_BUCKET }}
  
jobs:
  deployment:
    runs-on: 'ubuntu-latest'
    steps:

    - name: Checkout this repo
      uses: actions/checkout@v3

    - name: Build Webimpetus Disaster Recovery Management Docker Image based on the TARGET PLATFORM Image and push to Docker Hub
      run: |
        echo "Webimpetus Disaster Recovery Management Docker Image builder!"
        echo "Build, tag, and push image to the given Docker Registry."
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWD }}
        docker build -f $(pwd)/devops/docker/Dockerfile-dr \
        --build-arg DR_DB_HOST=${{ env.DR_DB_HOST }} \
        --build-arg DR_DB_USER=${{ env.DR_DB_USER }} \
        --build-arg DR_DB_PASSWORD=${{ env.DR_DB_PASSWORD }} \
        --build-arg DR_DB_NAME=${{ env.DR_DB_NAME }} \
        --build-arg DR_DB_PORT=${{ env.DR_DB_PORT }} \
        --build-arg DR_MINIO_HOST=${{ env.DR_MINIO_HOST }} \
        --build-arg DR_MINIO_ACCESS_KEY=${{ env.DR_MINIO_ACCESS_KEY }} \
        --build-arg DR_MINIO_SECRET_KEY=${{ env.DR_MINIO_SECRET_KEY }} \
        --build-arg DR_MINIO_BUCKET=${{ env.DR_MINIO_BUCKET }} \
        --platform linux/amd64,linux/arm64 \
        -t ${{ env.IMAGE_NAME }} . --no-cache
        docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
        docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
      shell: bash

    - name: Slack Notification for Workstation Disaster Recovery 
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'The Docker Image has been pushed :rocket:'
        SLACK_TITLE: Workstation Disaster Recovery
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}