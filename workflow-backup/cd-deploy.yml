# .github/workflows/deploy.yml
name: CD - Helm 1-Click Manual Deploy Workstation CRM to any given ENV into a given Kubernetes cluster

on:
  push:
    branches: [ dummy ]

  workflow_dispatch:
    inputs:
      ENV_REF:
        type: choice
        description: 'Please choose the Target Environment'
        default: 'test'
        required: true
        options:
        - test
        - acc
        - prod

      TARGET_CLUSTER:      
        type: choice
        description: 'Please choose the Target K3S Cluster(s)'
        default: 'k3s2'
        required: true
        options:
        - k3s1
        - k3s2
        - k3s3
        - All

      IMAGE_REGISTRY:
        type: choice
        description: 'Please choose docker image registry to push'
        default: 'bwalia'
        required: true
        options:
        - bwalia
        - ghcr.io
        - registry.workstation.co.uk
        - 123154119074.dkr.ecr.eu-west-2.amazonaws.com 

      IMAGE_NAME:
        type: choice
        description: 'Please choose docker image name to push'
        default: 'webimpetus'
        required: true
        options:
        - webimpetus
        - workstation

      IMAGE_TAG:
        type: choice
        description: 'Please choose docker image tag to push'
        default: 'latest'
        required: true
        options:
        - latest
        - stable
        - prod
        - acc
        - test
        - dev

env:
  TARGET_ENV: ${{ github.event.inputs.ENV_REF }}
  TARGET_CLUSTER: ${{ github.event.inputs.TARGET_CLUSTER }}
  minReplicas: ${{ secrets.minReplicas }}

  IMAGE_REGISTRY: ${{ github.event.inputs.IMAGE_REGISTRY }}
  IMAGE_NAME: ${{ github.event.inputs.IMAGE_NAME }}
  IMAGE_TAG: ${{ github.event.inputs.IMAGE_TAG }}
  TARGET_STACK: openresty_php
  KUBECTL_CMD_FILE_EXEC_STR: "chmod +x /usr/local/bin/bootstrap-openresty.sh"
  KUBECTL_CMD_FILE_RUN_STR: "/usr/local/bin/bootstrap-openresty.sh"

  # KUBE_CONFIG_DATA_K3S1: ${{ secrets.KUBE_CONFIG_DATA_K3S1 }}
  # KUBE_CONFIG_DATA_K3S2: ${{ secrets.KUBE_CONFIG_DATA_K3S2 }}
  # KUBE_CONFIG_DATA_K3S3: ${{ secrets.KUBE_CONFIG_DATA_K3S3 }}

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check out this repo code
      uses: actions/checkout@v2
      with:
        ref: "main"

    - name: Run bash script to perform Cluster kubeconfig mapping and resetting env vars if necessary
      run: |
        if [ "${{ env.IMAGE_REGISTRY }}" == "" ]; then
          echo "IMAGE_REGISTRY=${{ secrets.DOCKER_REGISTRY }}" >> $GITHUB_ENV
        else
          echo "IMAGE_REGISTRY is provided : ${{ env.IMAGE_REGISTRY }}"
        fi
        if [ "${{ env.IMAGE_NAME }}" == "" ]; then
          echo "IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
        else
          echo "IMAGE_NAME is provided : ${{ env.IMAGE_NAME }}"
        fi
        if [ "${{ env.TARGET_CLUSTER }}" == "k3s1" ]; then
          echo "KUBE_CONFIG_DATA=${{ secrets.KUBE_CONFIG_DATA_K3S1 }}" >> $GITHUB_ENV
        else
          echo "KUBE_CONFIG_DATA is NOT k3s1"
        fi
        if [ "${{ env.TARGET_CLUSTER }}" == "k3s2" ]; then
          echo "KUBE_CONFIG_DATA=${{ secrets.KUBE_CONFIG_DATA_K3S2 }}" >> $GITHUB_ENV
        else
          echo "KUBE_CONFIG_DATA is NOT k3s2"
        fi
        if [ "${{ env.TARGET_CLUSTER }}" == "k3s3" ]; then
          echo "KUBE_CONFIG_DATA=${{ secrets.KUBE_CONFIG_DATA_K3S3 }}" >> $GITHUB_ENV
        else
          echo "KUBE_CONFIG_DATA is NOT k3s3"
        fi
        echo "Docker image and k3s cluster kubeconfig mapping - done!"
      shell: bash

    # - name: Helm Delete - Release
    #   uses: koslib/helm-eks-action@master
    #   with:
    #     command: helm delete wsl-$TARGET_ENV -n $TARGET_ENV

    - name: Helm Deploy - Release to selected K3S cluster
      uses: koslib/helm-eks-action@master
      with:
        command: |
          helm upgrade -i wsl-${{ env.TARGET_ENV }} ./devops/webimpetus-chart -f devops/webimpetus-chart/values-${{ env.TARGET_ENV }}-${{ env.TARGET_CLUSTER}}.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace
          kubectl rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
          kubectl rollout history deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
        
    - name: Slack Notification for Workstation CRM release 
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'Post Content :rocket:'
        SLACK_TITLE: Post Title
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}