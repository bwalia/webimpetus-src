---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{SITE_NAME}}-configmap-prod
data:
  static-files-cache: |
        proxy_cache_path  /var/nginx/cache levels=1:2 keys_zone=STATIC_FILES_CACHE:8m max_size=1000m inactive=600m;
        proxy_temp_path /var/nginx/cache/tmp;
        proxy_connect_timeout 600;
        proxy_read_timeout 600;
        proxy_send_timeout 600;
  tenants-shared: |
        set $root "/var/www/html/appstarter/public";
        root   $root;
        set $bootstrap "index.php";
        index  $bootstrap;
        set $no_cache "";
        if ($request_method !~ ^(GET|HEAD)$) {
        set $no_cache "1";
        }
        if ($request_filename ~* ^.+.(xml|svg|SVG|swf|jpg|jpeg|gif|css|png|js|ico|zip|exe|dmg|MOV|mov|woff|woff2|ttf|txt)$) {
         set $no_cache "";
        }
        location ~ \.php$ {
        root   $root;
        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
        # client_header_timeout 1200;
        # client_body_timeout 1200;
        fastcgi_send_timeout 1200;
        fastcgi_read_timeout 1200;
        fastcgi_connect_timeout 1200;
        keepalive_timeout 600;
        fastcgi_buffers 1024 32k;
        fastcgi_buffer_size 128k;
        fastcgi_busy_buffers_size 256k;
        try_files $uri =404;
        fastcgi_intercept_errors on;
        fastcgi_index  index.php;
        include fastcgi_params;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        client_max_body_size 10m;
        client_body_buffer_size 128k;
        fastcgi_pass unix:/var/run/php-fpm/www.sock;
        }
        location / {
        root   $root;
        break;
        }
  tizoinfra-manager-server: |
    upstream upstream_tizohub_infra_manager {
      server localhost:80;
      keepalive 1024;
    }
    server {
      listen 80;
      server_name {{SITE_NAME}}.tizohub.com test-{{SITE_NAME}}.tizohub.com;
      set $backend_proxy "tizohub_infra_manager";
      include /opt/nginx/conf/nginx-tenants.d/includes/tenants-shared.conf;
    }
    server {
      listen 81;
      server_name {{SITE_NAME}}.tizohub.com test-{{SITE_NAME}}.tizohub.com;
              location /
              {
          return 301 https://$host$request_uri;
          	  }	
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{SITE_NAME}}-deployment-prod
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{SITE_NAME}}-app-prod
  template:
    metadata:
      labels:
        app: {{SITE_NAME}}-app-prod
    spec:
      volumes:
        - name: nginx-vol
          configMap:
            name: {{SITE_NAME}}-configmap-prod
            items:
              - key: static-files-cache
                path: cache.conf
              - key: tizoinfra-manager-server
                path: tizoinfra-manager-server.conf
              - key: tenants-shared
                path: includes/tenants-shared.conf
        - name: nginx-logs
          emptyDir: {}
      containers:
        - name: tizo-{{SITE_NAME}}
          image: 407404133447.dkr.ecr.eu-west-2.amazonaws.com/tizoinfra/tizohub:latest
#          image: 407404133447.dkr.ecr.eu-west-2.amazonaws.com/tizoinfra/tizotenant:latest
          livenessProbe:
            httpGet:
              path: /
              port: 80
              httpHeaders:
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            limits:
              memory: "256Mi"
            requests:
              memory: 128Mi
          ports:
            - containerPort: 80
          volumeMounts:
              - name: nginx-vol
                mountPath: /opt/nginx/conf/nginx-tenants.d
                readOnly: true
              - name: nginx-logs
                mountPath: /var/log/nginx
          env:
            - name: ENV_VAR_NAME
              value: "ENV_VAR_VALUE"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    # This annotation is only required if you are creating an internal facing ELB. Remove this annotation to create public facing ELB.
    service.beta.kubernetes.io/aws-load-balancer-type: alb
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:eu-west-2:407404133447:certificate/1304ab6c-1fc2-48bb-a55c-7a1f0de996d6
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/force-ssl-redirect: "true"
  name: {{SITE_NAME}}-svc-prod
  labels:
  name: {{SITE_NAME}}-svc-prod
spec:
  type: LoadBalancer
  ports:
  - name: "http"
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 80
  selector:
    app: {{SITE_NAME}}-app-prod
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{SITE_NAME}}-ingress-prod
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: {{SITE_NAME}}.tizohub.com
    http:
      paths:
        - path: /
          backend:
            service_name: {{SITE_NAME}}-svc-prod
            servicePort: 80
  - host: test-{{SITE_NAME}}.tizohub.com
    http:
      paths:
        - path: /
          backend:
            service_name: {{SITE_NAME}}-svc-prod
            servicePort: 80
