name: "Build Workstation CRM Docker Image and Deploy to K3S"

on:
  push:
    branches: [ main ]
    
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        type: choice
        description: 'Please choose the environment'
        default: 'test'
        required: true
        options:
          - int
          - test
          - acc
          - prod
        
env:
  IMAGE_TAG: "int"
  TARGET_IMAGE_TAG: "int"
  TARGET_STACK: openresty_php
  IMAGE_NAME: webimpetus
  TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'int' }}
  minReplicas: ${{ secrets.minReplicas_test }}
  IMAGE_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  TARGET_CLUSTER: "k3s2"
  KUBE_CONFIG_K3S: ${{ secrets.KUBE_CONFIG_DATA_K3S2 }}

jobs:
    build:
        name: Build the Image and push to Docker Hub
        runs-on: 'ubuntu-latest'
        steps:

        - name: Checkout this repo
          uses: actions/checkout@v3

        - name: short-sha
          uses: benjlevesque/short-sha@v1.2
          with:
            length: 6

        - run: echo $SHA
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}

        - run: echo $SHA
          env:
            SHA: ${{ env.SHA }}

        - name: Build WebImpetus Docker image based on the TARGET PLATFORM Image and push to Docker Hub
          run: |
            echo "WebImpetus Docker image builder!"
            echo "Build, tag, and push image to the given Docker Registry."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWD }}
            docker build -f $(pwd)/devops/docker/Dockerfile --build-arg TAG=latest -t wsl-${{ env.TARGET_STACK }} . --no-cache
            docker tag wsl-${{ env.TARGET_STACK }} ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
            docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
          shell: bash


    deploy:
        name: Deploy the build docker image to the given Environment using Helm
        runs-on: [ ubuntu-latest ]
        needs: [ build ]
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3
        - name: Map Cluster kubeconfig for selected env
          run: |
            if [ "${{ env.TARGET_ENV }}" == "test" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S2 }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
            if [ "${{ env.TARGET_ENV }}" == "acc" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S2 }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
            if [ "${{ env.TARGET_ENV }}" == "prod" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S1 }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
                      
        - name: Helm Deploy - Release Workstation CRM to K3S2 Rancher
          uses: koslib/helm-eks-action@master
          env:
            KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_K3S }}
          with:
            command: |
              helm upgrade -i wsl-${{ env.TARGET_ENV }} ./devops/webimpetus-chart -f devops/webimpetus-chart/values-${{ env.TARGET_ENV }}-${{ env.TARGET_CLUSTER}}.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace
                    
        - name: Restart Workstation CRM Pods using Kubectl            
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}        

        - name: Print Workstation CRM deployment history using Kubectl            
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: rollout history deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}

        - name: Print Workstation CRM Pods using Kubectl            
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: get pods -n ${{ env.TARGET_ENV }}     
        
        - name: Slack Notification for Workstation CRM release 
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_CHANNEL: general
            SLACK_COLOR: ${{ job.status }}
            SLACK_ICON: https://github.com/rtCamp.png?size=48
            SLACK_MESSAGE: 'Workstation CRM deployed to ${{ env.TARGET_ENV }} env :rocket:'
            SLACK_TITLE: Workstation CRM deployment status
            SLACK_USERNAME: rtCamp
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
