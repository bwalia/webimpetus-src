name: CI - 1-Click Helm Auto Deploy - Workstation CRM to the Test ENV into a default K3S Kubernetes cluster

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_TAG: "test"
  TARGET_IMAGE_TAG: "test"
  TARGET_STACK: openresty_php
  IMAGE_NAME: webimpetus
  TARGET_ENV: test
  minReplicas: ${{ secrets.minReplicas_test }}
  IMAGE_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  KUBECTL_CMD_FILE_EXEC_STR: "chmod +x /usr/local/bin/bootstrap-openresty.sh"
  KUBECTL_CMD_FILE_RUN_STR: "/usr/local/bin/bootstrap-openresty.sh"
  TARGET_CLUSTER: "k3s2"
  
jobs:
  deployment:
    runs-on: 'ubuntu-latest'
    steps:

    - name: Checkout this repo
      uses: actions/checkout@v3

    - name: short-sha
      uses: benjlevesque/short-sha@v1.2
      with:
        length: 6

    - run: echo $SHA
      env:
       SHA: ${{ steps.short-sha.outputs.sha }}

    - run: echo $SHA
      env:
       SHA: ${{ env.SHA }}

    - name: Build WebImpetus Docker image based on the TARGET PLATFORM Image and push to Docker Hub
      run: |
        echo "WebImpetus Docker image builder!"
        echo "Build, tag, and push image to the given Docker Registry."
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWD }}
        docker build -f $(pwd)/devops/docker/Dockerfile --build-arg TAG=latest -t wsl-${{ env.TARGET_STACK }} . --no-cache
        docker tag wsl-${{ env.TARGET_STACK }} ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
        docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
      shell: bash

    - name: Helm Deploy - Release K3S2
      uses: koslib/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_K3S2 }}
      with:
        command: |
          helm upgrade -i wsl-${{ env.TARGET_ENV }} ./devops/webimpetus-chart -f devops/webimpetus-chart/values-${{ env.TARGET_ENV }}-${{ env.TARGET_CLUSTER}}.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace
          kubectl rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
          kubectl rollout history deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}

    - uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA_K3S2 }}
      with:
        args: rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}

    - uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA_K3S2 }}
      with:
        args: get pods -A

#     - name: Helm Deploy - Release K3S3
#       uses: koslib/helm-eks-action@master
#       env:
#         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_K3S3 }}
#       with:
#         #command: helm delete wsl-$TARGET_ENV -n $TARGET_ENV
#         #command: helm upgrade -i wsl-${{ env.TARGET_ENV }} ./devops/webimpetus-chart -f devops/webimpetus-chart/values-${{ env.TARGET_ENV }}-k3s3.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.TARGET_IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace
# #          kubectl rollout pause deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
#           # kubectl scale deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }} --replicas=${{ secrets.minReplicas }} -n ${{ env.TARGET_ENV }}
#           # kubectl rollout resume deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
#         # && kubectl exec -it deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }} -- ${{ env.KUBECTL_CMD_FILE_EXEC_STR}} && kubectl exec -it deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }} -- ${{ env.KUBECTL_CMD_FILE_RUN_STR}}
#         command: |
#           helm upgrade -i wsl-${{ env.TARGET_ENV }} ./devops/webimpetus-chart -f devops/webimpetus-chart/values-${{ env.TARGET_ENV }}-${{ env.TARGET_CLUSTER}}.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.TARGET_IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace
#           kubectl rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}
#           kubectl rollout history deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}

    # - uses: actions-hub/kubectl@master
    #   env:
    #     KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA_K3S3 }}
    #   with:
    #     args: rollout restart deployment/wsl-${{ env.TARGET_ENV }} -n ${{ env.TARGET_ENV }}

    # - uses: actions-hub/kubectl@master
    #   env:
    #     KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA_K3S3 }}
    #   with:
    #     args: get pods -A

    - name: Slack Notification for Workstation CRM release 
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'Post Content :rocket:'
        SLACK_TITLE: Post Title
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
