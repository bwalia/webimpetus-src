name: Webimpetus database restore

on:
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        type: choice
        description: 'Please choose the environment'
        default: 'int'
        required: true
        options:
          - 'dev'    
          - 'int'    
          - 'test'    
          - 'acc'    
          - 'prod'
      SERVICE_CODE:
        type: choice
        description: 'Please choose the service code'
        default: 'wsl'
        required: true
        options:
          - 'wsl'    
          - 'wscom'
      FILE_NAME:
        description: 'Please enter the file name'
        required: true

env:
  TARGET_ENV : ${{ github.event.inputs.TARGET_ENV || 'int' }}
  FILE_NAME : ${{ github.event.inputs.FILE_NAME }}
  SERVICE_CODE : ${{ github.event.inputs.SERVICE_CODE || 'wsl' }}
  DR_DB_HOST: ${{ secrets.DR_DB_HOST }}
  DR_DB_USER: ${{ secrets.DR_DB_USER }}
  DR_DB_PASSWORD: ${{ secrets.DR_DB_PASSWORD }}
  DR_DB_PORT: ${{ secrets.DR_DB_PORT }}

jobs:
  restore:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up MinIO client
      run: |
        curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/

    - name: Configure MinIO client
      env:
        MINIO_ENDPOINT: ${{ secrets.DR_MINIO_HOST }}
        MINIO_ACCESS_KEY: ${{ secrets.DR_MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY: ${{ secrets.DR_MINIO_SECRET_KEY }}
      run: |
        mc alias set myminio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

    - name: Check if backup file exists on MinIO
      env:
        BACKUP_PATH: "${{ env.FILE_NAME }}"
      run: |
        nslookup s3-cli.workstation.co.uk
        echo "Checking if file exists: myminio/wsl-${{ env.TARGET_ENV }}-db-backups/hourly/$BACKUP_PATH"
        mc stat myminio/wsl-${{ env.TARGET_ENV }}-db-backups/hourly/$BACKUP_PATH || { echo "File does not exist."; exit 1; }

    - name: Check if file is .sql
      if: endsWith(env.FILE_NAME, '.sql')
      env:
        BACKUP_PATH: "${{ env.FILE_NAME }}"
      run: |
        mc cp myminio/wsl-${{ env.TARGET_ENV }}-db-backups/hourly/$BACKUP_PATH /tmp/backup.sql
        echo "SQL_FILE_PATH=/tmp/backup.sql" >> $GITHUB_ENV

    - name: Check if file is .sql.gz
      if: endsWith(env.FILE_NAME, '.sql.gz')
      env:
        BACKUP_PATH: "${{ env.FILE_NAME }}"
      run: |
        mc cp myminio/wsl-${{ env.TARGET_ENV }}-db-backups/hourly/$BACKUP_PATH /tmp/backup.sql.gz
        gunzip -c /tmp/backup.sql.gz > /tmp/backup.sql
        echo "SQL_FILE_PATH=/tmp/backup.sql" >> $GITHUB_ENV

    - name: File is not supported
      if: ${{ !endsWith(env.FILE_NAME, '.sql') && !endsWith(env.FILE_NAME, '.tar.gz') && !endsWith(env.FILE_NAME, '.sql.gz') }}
      run: |
        echo "The file is neither a .sql nor a .tar.gz file."
        exit 1

    - name: Download backup from MinIO
      if: endsWith(env.FILE_NAME, '.tar.gz')
      env:
        BACKUP_PATH: "${{ env.FILE_NAME }}"
      run: |
        mc cp myminio/wsl-${{ env.TARGET_ENV }}-db-backups/hourly/$BACKUP_PATH /tmp/backup.tar.gz

    - name: Extract backup file
      if: endsWith(env.FILE_NAME, '.tar.gz')
      run: |
        mkdir -p /tmp/extracted
        tar -xzf /tmp/backup.tar.gz -C /tmp/extracted
        ls /tmp/extracted

    - name: Find SQL file
      if: endsWith(env.FILE_NAME, '.tar.gz')
      id: find_sql
      run: |
        SQL_FILE=$(find /tmp/extracted/var/www/html/writeable/backups -type f -name "*.sql" | head -n 1)
        echo "SQL_FILE_PATH=$SQL_FILE" >> $GITHUB_ENV
        if [ -z "$SQL_FILE" ]; then
          echo "No SQL file found in the extracted archive."
          exit 1
        fi
        echo "Found SQL file: $SQL_FILE"

    - name: Install MySQL client
      run: sudo apt-get -y install mysql-client
  
    - name: Restore MySQL database
      env:
        MYSQL_HOST: ${{ env.DR_DB_HOST }}
        MYSQL_USER: ${{ env.DR_DB_USER }}
        MYSQL_PASSWORD: ${{ env.DR_DB_PASSWORD }}
        MYSQL_PORT: ${{ env.DR_DB_PORT }}
      run: |
        mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD ${{ env.SERVICE_CODE }}-${{ env.TARGET_ENV }}-db < ${{ env.SQL_FILE_PATH }}
